import numpy as np
import dask
import spatialdata as sd
import txsim as tx
import anndata as ad

## VIASH START
# Note: this section is auto-generated by viash at runtime. To edit it, make changes
# in config.vsh.yaml and then run `viash config inject config.vsh.yaml`.
par = {
  'input': 'resources_test/common/2023_10x_mouse_brain_xenium/dataset.zarr',
  'transcripts_key': 'rep1_transcripts',
  'segmentation_input': 'label_image.zarr',
  'coordinate_system': 'rep1_global',
  'output': 'assigned_transcripts.zarr',
  'sc_data': 'brain_scrnaseq_subsample_WMB-10X.h5ad',
  'sc_celltype_key': 'subclass'
}
meta = {
  'name': 'pciSeq'
}
## VIASH END

# # Set coordinate system to default if not given
# if par['coordinate_system'] == None:
#    par['coordinate_system'] = 'global'

# Read input
print('Reading input files', flush=True)
sdata = sd.read_zarr(par['input'])
sdata_segm = sd.read_zarr(par['segmentation_input'])

# Check if coordinate system is available in input data
transcripts_coord_systems = sd.transformations.get_transformation(sdata[par["transcripts_key"]], get_all=True).keys()
assert par['coordinate_system'] in transcripts_coord_systems, f"Coordinate system '{par['coordinate_system']}' not found in input data."
segmentation_coord_systems = sd.transformations.get_transformation(sdata_segm["segmentation"], get_all=True).keys()
assert par['coordinate_system'] in segmentation_coord_systems, f"Coordinate system '{par['coordinate_system']}' not found in input data."

# Transform transcript coordinates to the coordinate system
print('Transforming transcripts coordinates', flush=True)
transcripts = sd.transform(sdata[par['transcripts_key']], to_coordinate_system=par['coordinate_system'])

# In case of a translation transformation of the segmentation (e.g. crop of the data), we need to adjust the transcript coordinates
trans = sd.transformations.get_transformation(sdata_segm["segmentation"], get_all=True)[par['coordinate_system']].inverse()
transcripts = sd.transform(transcripts, trans, par['coordinate_system'])

# Assign cell ids to transcripts
print('Assigning transcripts to cell ids', flush=True)
y_coords = transcripts.y.compute().to_numpy(dtype=np.int64)
x_coords = transcripts.x.compute().to_numpy(dtype=np.int64)

#Added for pciSeq
#TODO this will immediately break when the name of the gene isn't feature_name
transcripts_dataframe = sdata[par['transcripts_key']].compute()[['feature_name']] 
transcripts_dataframe['x'] = x_coords
transcripts_dataframe['y'] = y_coords

#same as before
label_image = sdata_segm["segmentation"]["scale0"].image.to_numpy() #TODO: mabye this line needs generalization (DataTree vs DataArray)



sc_data = ad.read_h5ad(par['sc_data'])
assignments, cell_types = tx.preprocessing.run_pciSeq(
    transcripts_dataframe,
    label_image,
    sc_data,
    par['sc_celltype_key']
)
#TODO: how to handle opts?
#TODO how many partitions
#TODO throw away celltypes?
# cell_id_dask_series = dask.dataframe.from_pandas(assignments['cell'], npartitions=1)
cell_id_dask_series = dask.dataframe.from_dask_array(
    dask.array.from_array(
        assignments['cell'].to_numpy(), chunks=tuple(sdata[par['transcripts_key']].map_partitions(len).compute())
    ), 
    index=sdata[par['transcripts_key']].index
)

sdata[par['transcripts_key']]["cell_id"] = cell_id_dask_series 

# TODO: Also take care of the following cases:
# - segmentation 3D, transcripts 3D
# - segmentation 3D, transcripts 2D
# - segmentation 2D, transcripts 3D

# Subset sdata to transcripts with cell ids (TODO: maybe even throw out all cols except for cell id)
print('Subsetting to transcripts cell id data', flush=True)
sdata_transcripts_only = sd.SpatialData.init_from_elements({par['transcripts_key']: sdata[par['transcripts_key']]})

# Rename points key to 'transcripts'
sdata_transcripts_only.points['transcripts'] = sdata_transcripts_only.points.pop(par['transcripts_key'])

# Write output
print('Write transcripts with cell ids', flush=True)
sdata_transcripts_only.write(par['output'])



