# ----------------- SEGMENTATION ----------------- #

#How to add blur + other parameters that matter?
watershed:
  thresh: None
  geq: False

cellpose:
  model_type: None
  batch_size: 8
  channels: None
  channel_axis: None
  z_axis: None
  normalize: True
  invert: False
  rescale: None
  diameter: None
  do_3D: False
  anisotropy: None
  net_avg: False
  augment: False
  tile: True
  tile_overlap: 0.1
  resample: True
  interp: True
  flow_threshold: 0.4
  cellprob_threshold: 0.0
  compute_masks: True
  min_size: 15 #SCALE PARAM
  stitch_threshold: 0.0
  progress: None
  loop_run: False
  model_loaded: False

segmentation_params:
  expand: 0 #SCALE PARAM


# ----------------- ASSIGNMENT ----------------- #

clustermap:
  model: 
    dapi: None
    num_dims: 3
    xy_radius: None
    z_radius: None
    fast_preprocess: False
    gauss_blur: False
    sigma: 1
  preprocess:
    dapi_grid_interval: 5
    contamination: 0.1
    pct_filter: 0.05
    LOF: False
  segmentaton:
    cell_num_threshold: 0.01
    dapi_grid_interval: 5
    add_dapi: True
    use_genedis: True


# ----------------- ASSIGNMENT ----------------- #

pciSeq:
  # list of genes to be excluded during cell-typing, e.g ['Aldoc', 'Id2'] to exclude all spots from Aldoc and Id2
  exclude_genes: None

  # Maximum number of loops allowed for the Variational Bayes to run
  max_iter: 1000

  # Convergence achieved if assignment probabilities between two successive loops is less than the tolerance
  CellCallTolerance: 0.02

  # A gamma distribution expresses the efficiency of the in-situ sequencing for each gene. It tries to capture
  # the ratio of the observed over the theoretical counts for a given gene. rGene controls the variance and
  # Inefficiency is the average of this assumed Gamma distribution
  rGene: 20
  Inefficiency: 0.2

  # If a spot is inside the cell boundaries this bonus will give the likelihood an extra boost
  # in order to make the spot more probable to get assigned to the cell than another spot positioned
  # outside the cell boundaries
  InsideCellBonus: 2

  # To account for spots far from the some a uniform distribution is introduced to describe those misreads.
  # By default this uniform distribution has a density of 1e-5 misreads per pixel.
  MisreadDensity: 0.00001

  # Gene detection might come with irregularities due to technical errors. A small value is introduced
  # here to account for these errors. It is an additive factor, applied to the single cell expression
  # counts when the mean counts per class and per gene are calculated.
  SpotReg: 0.1

  # By default only the 3 nearest cells will be considered as possible parent cells for any given spot.
  # There is also one extra 'super-neighbor', which is always a neighbor to the spots so we can assign
  # the misreads to. Could be seen as the background. Hence, by default the algorithm tries examines
  # whether any of the 3 nearest cells is a possible parent cell to a given cell or whether the spot is
  # a misread
  nNeighbors: 3

  # A gamma distributed variate from Gamma(rSpot, 1) is applied to the mean expression, hence the counts
  # are distributed according to a Negative Binomial distribution.
  # The value for rSpot will control the variance/dispersion of the counts
  rSpot: 2

  # Boolean, if True the output will be saved as tsv files in a folder named 'pciSeq' in your system's temp dir.
  save_data: False

  # output directory 'default' will save to temp location
  output_path: ['default']

  # Use either np.float16 or np.float32 to reduce memory usage. In most cases RAM consumption shouldnt
  # need more than 32Gb RAM. If you have a dataset from a full coronal mouse slice with a high number of
  # segmented cells (around 150,000) a gene panel of more than 250 genes and 100 or more different
  # cell types (aka clusters, aka classes) in the single cell data then you might need at least 64GB on
  # your machine. Changing the datatype to a float16 or float32 will help keeping RAM usage to a lower
  # level
  dtype: np.float64

baysor:
  # Taken from https://github.com/kharchenkolab/Baysor/blob/master/configs/example_config.toml
  
  # [Data]
  # Name of the x column in the input data. Default: "x"
  x-column : '"x"'
  # Name of the y column in the input data. Default: "y"
  y-column : '"y"'
  # Name of the y column in the input data. Default: "z"
  z-column : '"z"'
  # Name of gene column in the input data. Default: "gene"
  gene-column : '"Gene"'
  # Minimal number of molecules per gene. Default: 1
  min-molecules-per-gene : 1
  # Minimal number of molecules for a cell to be considered as real. It's an important parameter, as it's used to infer several other parameters. Default: 3
  min-molecules-per-cell : 3
  # Scale parameter, which suggest approximate cell radius for the algorithm. This parameter is required.
  scale : 50 #SCALE PARAM
  # Standard deviation of scale across cells. Can be either number, which means absolute value of the std, or string ended with "%" to set it relative to scale. Default: "25%"
  # "scale-std" : '"25%"',
  
  # Not exactly sure if this one should be in [Data], therefore we don't provide it via the toml, so not possibl issues here.
  prior-segmentation-confidence : 0.2
  
  # # Use scale estimate from DAPI if provided. Default: true
  # "estimate-scale-from-centers" : "true",
  # # Minimal number of molecules in a segmented region, required for this region to be considered as a possible cell. Default: min-molecules-per-cell / 4
  # # "min-molecules-per-segment" : 2, # TODO: throws Error ErrorException("Unexpected value in the config: 'min-molecules-per-segment'")
  # 
  # #[Sampling] These parameters shouldn't normally be changed
  # # Prior weight of assignment a molecule to new component. Default: 0.2
  # "new-component-weight" : 0.2,
  # # Fraction of distributions, sampled at each stage. Default: 0.3
  # "new-component-fraction" : 0.3,
  
  #[Plotting]
  # Number of neighbors (i.e. 'k' in k-NN), which is used for gene composition visualization. Larger numbers leads to more global patterns. Default: estimate from min-molecules-per-cell
  # "gene-composition-neigborhood" : 20, # TODO: ErrorException("Unexpected value in the config: 'gene-composition-neigborhood'")
  # Number of pixels per cell of minimal size, used to estimate size of the final plot. For most protocols values around 7-30 give enough visualization quality. Default: 15
  # "min-pixels-per-cell" : 15, # TODO: didn't check this one, plotting is not so important i guess
  
basic:
  dummy_param: 0

# ----------------- NORMALIZATION ----------------- #


#other params?
area:
  alpha: 0
  use_max_area: True

total:
  find_area: False
  use_max_area: True

normalize_params:
  max_area: None
  min_area: None
  min_counts: 10
  min_cell_percentage: 0.8

# ----------------- ANNOTATION ----------------- #
majority:
  threshold: 0.7

ssam:
  threshold: 0.7

pciSeqCT:
  threshold: 0.7

annotation_params:
  per_gene_correction: False
  per_gene_layer: lognorm